{-# OPTIONS --safe --lossy-unification #-}

open import Prelude renaming (tt to ‚ü®‚ü©)
open import Signatures
open import FinitenessConditions
open import FreeMonad.PackagedTheory

module Effects.State
  (S : Type)
  (finiteState : SplitQuotientedChoiceœâ S)
  (setState : isSet S)
  where

module StateFunctor where
  data Op : Type where
    `get  : Op
    `put  : S ‚Üí Op

  Arity : Op ‚Üí Type
  Arity `get      = S
  Arity (`put _)  = ‚ä§

open StateFunctor using (`get; `put) public

open StateFunctor

ùïä : Signature
ùïä = Op ‚óÅ Arity

S‚Çò : Type a ‚Üí Type a
S‚Çò A = S ‚Üí A √ó S

open import FreeMonad.Theory hiding (Law; Theory)
import FreeMonad.Theory

Law : Signature ‚Üí Type‚ÇÅ
Law ùîΩ = FreeMonad.Theory.Law 0 ùîΩ

Theory : Signature ‚Üí Type‚ÇÅ
Theory ùîΩ = FreeMonad.Theory.Theory 0 ùîΩ

module Synt where
  open import FreeMonad.Syntax ùïä public hiding (Syntax)
  open import FreeMonad.Syntax public using (Syntax)
  open SyntaxBind public

  put : S ‚Üí Syntax ùïä ‚ä§
  put s = Op‚ü¶ `put s ‚üß

  get : Syntax ùïä S
  get = Op‚ü¶ `get ‚üß

  toState : (S ‚Üí A √ó S) ‚Üí Syntax ùïä A
  toState f =
    do s ‚Üê get
       let y , s‚Ä≤ = f s
       put s‚Ä≤
       return y

  open FreeMonad.Theory.Law public
  open Equation public

  module PutPutLawDisplay where
    put-put-law : Law ùïä
    put-put-law .Œì = S √ó S
    put-put-law .ŒΩ _ = ‚ä§
    put-put-law .eqn (s‚ÇÅ , s‚ÇÇ) =
      (do put s‚ÇÅ ; put s‚ÇÇ) ‚âê (do put s‚ÇÇ)
  data Laws : Type 
  data Laws where put-put put-get get-put : Laws
  Eqns : Laws ‚Üí Law ùïä
  Eqns put-get .Œì  = S
  Eqns put-get .ŒΩ _ = S
  Eqns put-put .Œì = S √ó S
  Eqns put-put .ŒΩ _ = ‚ä§
  Eqns get-put .Œì  = ‚ä§
  Eqns get-put .ŒΩ _ = ‚ä§
  Eqns put-put  .eqn (s‚ÇÅ , s‚ÇÇ)  = (do put s‚ÇÅ; put s‚ÇÇ)  ‚âê (do put s‚ÇÇ)
  Eqns put-get  .eqn s          = (do put s; get)      ‚âê (do put s; return s)
  Eqns get-put  .eqn _          = (do s ‚Üê get; put s)  ‚âê (do return ‚ü®‚ü©)
  state-alg : ùïä -Alg[ (S ‚Üí A √ó S) ]
  state-alg (`get     , k) s‚ÇÅ = k  s‚ÇÅ  s‚ÇÅ
  state-alg (`put s‚ÇÇ  , k) s‚ÇÅ = k  ‚ü®‚ü©  s‚ÇÇ
  runState : Syntax ùïä A ‚Üí S ‚Üí A √ó S
  runState = interp state-alg _,_

open Synt using (module PutPutLawDisplay; state-alg) public

StateTheory : Theory ùïä
StateTheory = record { Synt }


module _ where
  open SplitQuotientedChoiceAt

  finiteOps : ‚àÄ O·µ¢ ‚Üí SplitQuotientedChoiceœâ (Arity O·µ¢)
  finiteOps `get = finiteState
  finiteOps (`put x) = quotientedChoice‚ä§

  finiteVars : FiniteVars StateTheory
  finiteVars Synt.put-put _ = quotientedChoice‚ä§
  finiteVars Synt.get-put _ = quotientedChoice‚ä§
  finiteVars Synt.put-get _ = finiteState
  
ùïä-theory = full-theory ùïä StateTheory finiteOps finiteVars

open import FreeMonad.Quotiented ùïä-theory renaming (Term to StateTerm) public

open Synt using (op; var)
Term = StateTerm

State : Type a ‚Üí Type _
State = StateTerm

get : Term S
get = [ op (`get , var) ]

put : S ‚Üí Term ‚ä§
put s = [ op (`put s , var) ]

put-put‚Ä≤ : ‚àÄ s‚ÇÅ s‚ÇÇ ‚Üí (do put s‚ÇÅ; put s‚ÇÇ) ‚â° (do put s‚ÇÇ)
put-put‚Ä≤ s‚ÇÅ s‚ÇÇ = eq/ _ _ (law‚Çú Synt.put-put (s‚ÇÅ , s‚ÇÇ))

modify : (S ‚Üí S) ‚Üí Term ‚ä§
modify f = do s ‚Üê get; put (f s)

put-put : ‚àÄ s‚ÇÅ s‚ÇÇ (k : Term A) ‚Üí (do put s‚ÇÅ; put s‚ÇÇ; k) ‚â° (do put s‚ÇÇ; k)
put-put s‚ÇÅ s‚ÇÇ k = cong (Œª p ‚Üí do p ; k) (put-put‚Ä≤ s‚ÇÅ s‚ÇÇ)

get-put :
  ‚àÄ (k : State A)
  ‚Üí (do s ‚Üê get
        put s
        k) ‚â° k
get-put k = cong (_>> k) (eq/ _ _ (law‚Çú Synt.get-put _))

put-get : ‚àÄ s (k : S ‚Üí State A) ‚Üí (do put s; s‚Ä≤ ‚Üê get; k s‚Ä≤) ‚â° (do put s; k s)
put-get s k = cong (Œª p ‚Üí do r ‚Üê p; k r) (eq/ _ _ (law‚Çú Synt.put-get s))

get-put-get : (k : S ‚Üí State A) ‚Üí (do s ‚Üê get; put s; k s) ‚â° (do s ‚Üê get; k s)
get-put-get k =   (do s ‚Üê get
                      put s
                      k s)

                                      ‚â°‚ü®‚ü©
                 
                  (do s ‚Üê get
                      put s
                      s‚Ä≤ ‚Üê return s
                      k s‚Ä≤)

                                      ‚â°Àò‚ü® s ‚áê get ‚®æ/ put-get s k ‚ü©
                 
                  (do s ‚Üê get
                      put s
                      s‚Ä≤ ‚Üê get
                      k s‚Ä≤)

                                      ‚â°‚ü® get-put (get >>= k) ‚ü©
                 
                  (do s ‚Üê get
                      k s) ‚àé

get-get : ‚àÄ  (k : S ‚Üí S ‚Üí State B) ‚Üí
             (do s‚ÇÅ ‚Üê get
                 s‚ÇÇ ‚Üê get
                 k s‚ÇÅ s‚ÇÇ)  ‚â° (do s ‚Üê get
                                 k s s)

get-get k =

  (do s‚ÇÅ ‚Üê get
      s‚ÇÇ ‚Üê get
      k s‚ÇÅ s‚ÇÇ)          ‚â°Àò‚ü® get-put _ ‚ü©

  (do s ‚Üê get
      put s
      s‚ÇÅ ‚Üê get
      s‚ÇÇ ‚Üê get
      k s‚ÇÅ s‚ÇÇ)          ‚â°‚ü® s ‚áê get ‚®æ/ put-get s _ ‚ü©

  (do s‚ÇÅ ‚Üê get
      put s‚ÇÅ
      s‚ÇÇ ‚Üê get
      k s‚ÇÅ s‚ÇÇ)          ‚â°‚ü® s‚ÇÅ ‚áê get ‚®æ/ put-get s‚ÇÅ _ ‚ü©

  (do s ‚Üê get
      put s
      k s s)            ‚â°‚ü® get-put-get _ ‚ü©

  (do s ‚Üê get
      k s s) ‚àé

get-nop : (k : State A) ‚Üí (get >> k) ‚â° k
get-nop k =

  (do get
      k)                  ‚â°Àò‚ü® get-put-get (Œª _ ‚Üí k) ‚ü©

  (do s ‚Üê get
      put s
      k)                  ‚â°‚ü® get-put k ‚ü©

  k ‚àé

toState : (S ‚Üí A √ó S) ‚Üí Term A
toState k = do s‚ÇÅ ‚Üê get
               let x , s‚ÇÇ = k s‚ÇÅ
               put s‚ÇÇ
               return x
open import Data.Vec

toState-synt : (f : S ‚Üí A √ó S) ‚Üí toState f ‚â° [ Synt.toState f ]
toState-synt f =
  sym (syntactic-bind _ Synt.get ‚®æ cong (get >>=_) (funExt (Œª s ‚Üí syntactic-bind (Œª _ ‚Üí Synt.return (f s .fst)) (Synt.put (f s .snd)))))

module _ (truncCarrier : isSet A) where
  module _ where
    open Synt using (put-put; put-get; get-put)

    runState-resp : (state-alg {A = A}) Models StateTheory
    runState-resp put-put t k = refl
    runState-resp put-get t k = refl
    runState-resp get-put t k = refl
  runState : Term A ‚Üí (S ‚Üí A √ó S)
  runState = interp‚Çú  state-alg
                      (Œª x s ‚Üí x , s)
                      runState-resp
                      ‚ãØ
    where ‚ãØ = isSetŒ† Œª _ ‚Üí isSet√ó truncCarrier setState

  rinv : ‚àÄ p ‚Üí runState (toState p) ‚â° p
  linv : ‚àÄ p ‚Üí toState (runState p) ‚â° p

  rinv f = cong runState (toState-synt f)

  linv =
    elimProp/
      (Œª _ ‚Üí squash/ _ _)
      (Synt.elim-s (Œª xs ‚Üí toState (Synt.runState xs) ‚â° [ xs ]) alg)
    where
    open Synt renaming (var to var) using (DepAlg; op)

    alg : Œ®[ xs ‚¶Ç Syntax A ] (toState (Synt.runState xs) ‚â° [ xs ])

    alg (var x) = get-put (return x)

    alg (op (`get , xs) r) =

      (do s ‚Üê get
          let y , s‚Ä≤ = Synt.runState (op (`get , xs)) s
          put s‚Ä≤
          return y)                                         ‚â°‚ü®‚ü©

      (do s ‚Üê get
          let y , s‚Ä≤ = Synt.runState (xs s) s
          put s‚Ä≤
          return y)                                         ‚â°Àò‚ü® get-get _ ‚ü©

      (do s‚ÇÅ ‚Üê get
          s‚ÇÇ ‚Üê get
          let y , s‚ÇÉ = Synt.runState (xs s‚ÇÅ) s‚ÇÇ
          put s‚ÇÉ
          return y)                                         ‚â°‚ü® s ‚áê get ‚®æ/ r s ‚ü©

      (do s ‚Üê get
          [ xs s ])                                         ‚â°Àò‚ü® syntactic-bind xs Synt.get ‚ü©

      [ op (`get , xs) ] ‚àé

    alg (op (`put x , xs) r) =

      toState (Synt.runState (op (`put x , xs)))                      ‚â°‚ü®‚ü©

      (do s‚ÇÅ ‚Üê get
          let y , s‚ÇÇ = Synt.runState (op (`put x , xs)) s‚ÇÅ
          put s‚ÇÇ
          return y)                                                   ‚â°‚ü®‚ü©

      (do s‚ÇÅ ‚Üê get
          let y , s‚ÇÇ = Synt.runState (xs ‚ü®‚ü©) x
          put s‚ÇÇ
          return y)                                                   ‚â°‚ü® get-nop _ ‚ü©

      (do let y , s‚ÇÇ = Synt.runState (xs ‚ü®‚ü©) x
          put s‚ÇÇ
          return y)                                                   ‚â°Àò‚ü® put-put _ _ (return (fst (Synt.runState (xs ‚ü®‚ü©) x))) ‚ü©

      (do put x
          let y , s‚ÇÇ = Synt.runState (xs ‚ü®‚ü©) x
          put s‚ÇÇ
          return y)                                                   ‚â°Àò‚ü® put-get _ _ ‚ü©

      (do put x
          s‚ÇÅ ‚Üê get
          let y , s‚ÇÇ = Synt.runState (xs ‚ü®‚ü©) s‚ÇÅ
          put s‚ÇÇ
          return y)                                                   ‚â°‚ü® cong (put x >>_) (r ‚ü®‚ü©) ‚ü©

      (do put x
          [ xs ‚ü®‚ü© ])                                                   ‚â°‚ü®‚ü©

      [ op (`put x , xs) ] ‚àé
      
  state-iso : State A ‚áî (S ‚Üí A √ó S)
  state-iso .fun = runState
  state-iso .inv = toState
  state-iso .rightInv = rinv
  state-iso .leftInv = linv

open import Truth hiding (Œ©)
open import Truth.Definition 0
open import Truth.Definition 1 using () renaming (Œ© to Œ©‚ÇÅ) 

