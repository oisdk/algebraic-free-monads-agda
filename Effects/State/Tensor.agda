{-# OPTIONS --lossy-unification --safe #-}

open import Prelude
open import FreeMonad.PackagedTheory
open import FinitenessConditions
open import Signatures
open import FreeMonad.Syntax
open import FreeMonad.Theory

module Effects.State.Tensor
  (S : Type)
  (choiceState : SplitQuotientedChoiceœâ S)
  (setState : isSet S)
  (‚Ñ±-theory : FullTheory 0)
  where

import Effects.State S choiceState setState as ùíÆ
open import FreeMonad.Combinations.Tensor ‚Ñ±-theory ùíÆ.ùïä-theory

open FullTheory ‚Ñ±-theory using (ùîΩ) renaming (ùíØ to ùíØùíª)

open ùíÆ using (ùïä) renaming (StateTheory to ùíØùìà)

State-Synt : Type a ‚Üí Type _
State-Synt A = S ‚Üí Syntax ùîΩ (A √ó S)

import FreeMonad.Quotiented ‚Ñ±-theory as ‚Ñ±
import FreeMonad.Quotiented ùíÆ.ùïä-theory as ùíÆt

State-Term : Type a ‚Üí Type _
State-Term A = S ‚Üí ‚Ñ±.Term (A √ó S)

module _ {A : Type a} where
  runState-alg : ùïä -Alg[ State-Term A ]
  runState-alg (ùíÆ.`get   , k) s = k s  s
  runState-alg (ùíÆ.`put s , k) _ = k tt s

  inj-alg : ùîΩ -Alg[ State-Term A ]
  inj-alg xs s = ‚Ñ±.op‚Çú (cmap (Œª r ‚Üí r s) xs)

  inj-alg-resp : inj-alg Models ùíØùíª
  inj-alg-resp i t k = funExt Œª s ‚Üí
    let lhs ‚âê rhs = ùíØùíª .Theory.Eqns i .eqn t
    in  interp ùîΩ inj-alg k lhs s       ‚â°‚ü® interp-fusion ùîΩ (_$ s) _ (Œª _ ‚Üí refl) lhs ‚ü©
        interp ùîΩ ‚Ñ±.op‚Çú (flip k s) lhs  ‚â°‚ü® ‚Ñ±.op‚Çú-resp i t (flip k s) ‚ü©
        interp ùîΩ ‚Ñ±.op‚Çú (flip k s) rhs  ‚â°Àò‚ü® interp-fusion ùîΩ (_$ s) _ (Œª _ ‚Üí refl) rhs ‚ü©
        interp ùîΩ inj-alg k rhs s ‚àé

  runState-resp : (runState-alg ‚¶Ç ùïä -Alg[ State-Term A ]) Models ùíØùìà
  runState-resp ùíÆ.Synt.Laws.put-put t k = refl
  runState-resp ùíÆ.Synt.Laws.put-get t k = refl
  runState-resp ùíÆ.Synt.Laws.get-put t k = refl

  runStateT-alg : (ùîΩ ‚äû ùïä) -Alg[ State-Term A ]
  runStateT-alg = inj-alg -‚äû- runState-alg

  runStateT-ret : A ‚Üí State-Term A
  runStateT-ret x s = ‚Ñ±.return (x , s)

  runStateT-commutes : ‚àÄ t ‚Üí runStateT-alg Respects commutative .eqn t
  runStateT-commutes (lift (xs , ùíÆ.`get   )) k = refl
  runStateT-commutes (lift (xs , ùíÆ.`put s )) k = refl

  runStateT-resp : runStateT-alg Models ùíØ
  runStateT-resp = ‚äó-resp inj-alg runState-alg  runStateT-commutes inj-alg-resp runState-resp 

module Synt where
  open SyntaxBind (ùîΩ ‚äû ùïä) public

  put : S ‚Üí Syntax (ùîΩ ‚äû ùïä) ‚ä§
  put x = op (inr (ùíÆ.`put x) , var)

  get : Syntax (ùîΩ ‚äû ùïä) S
  get = op (inr ùíÆ.`get , var)

  runStateT : Syntax (ùîΩ ‚äû ùïä) A ‚Üí State-Term A
  runStateT = interp _ runStateT-alg runStateT-ret

open import FreeMonad.Quotiented combinedTheory renaming (Term to State)

put : S ‚Üí State ‚ä§
put x = [ Synt.put x ]

get : State S
get = [ Synt.get ]

put-put : ‚àÄ s‚ÇÅ s‚ÇÇ (k : State A) ‚Üí put s‚ÇÅ >> (put s‚ÇÇ >> k) ‚â° put s‚ÇÇ >> k
put-put s‚ÇÅ s‚ÇÇ k = cong (_>> k) (eq/ _ _ (law‚Çú (inl (inr ùíÆ.Synt.put-put)) (s‚ÇÅ , s‚ÇÇ)))

get-put : ‚àÄ (k : State A) ‚Üí (do s ‚Üê get ; put s ; k) ‚â° k
get-put k = cong (_>> k) (eq/ _ _ (law‚Çú (inl (inr ùíÆ.Synt.get-put)) _))

put-get : ‚àÄ s (k : S ‚Üí State A) ‚Üí (do put s ; s‚Ä≤ ‚Üê get ; k s‚Ä≤) ‚â° (do put s ; k s)
put-get s k = cong (_>>= k) (eq/ _ _ (law‚Çú (inl (inr ùíÆ.Synt.put-get)) s))

get-put-get : (k : S ‚Üí State A) ‚Üí
              (do s ‚Üê get ; put s ; k s)  ‚â° (do s ‚Üê get ; k s)
get-put-get k =

  (do s ‚Üê get
      put s
      k s)                                 ‚â°‚ü®‚ü©

  (do s ‚Üê get
      put s
      s‚Ä≤ ‚Üê return s
      k s‚Ä≤)                                ‚â°Àò‚ü® s ‚áê get ‚®æ/ put-get s k ‚ü©

  (do s ‚Üê get
      put s
      s‚Ä≤ ‚Üê get
      k s‚Ä≤)                                ‚â°‚ü® get-put (get >>= k) ‚ü©

  (do s ‚Üê get
      k s) ‚àé

get-get : ‚àÄ (k : S ‚Üí S ‚Üí State B) ‚Üí
          (do s‚ÇÅ ‚Üê get
              s‚ÇÇ ‚Üê get
              k s‚ÇÅ s‚ÇÇ)  ‚â° (do s ‚Üê get
                              k s s)

get-get k =

  (do s‚ÇÅ ‚Üê get
      s‚ÇÇ ‚Üê get
      k s‚ÇÅ s‚ÇÇ)          ‚â°Àò‚ü® get-put _ ‚ü©

  (do s ‚Üê get
      put s
      s‚ÇÅ ‚Üê get
      s‚ÇÇ ‚Üê get
      k s‚ÇÅ s‚ÇÇ)          ‚â°‚ü® s ‚áê get ‚®æ/ put-get s _ ‚ü©

  (do s‚ÇÅ ‚Üê get
      put s‚ÇÅ
      s‚ÇÇ ‚Üê get
      k s‚ÇÅ s‚ÇÇ)          ‚â°‚ü® s‚ÇÅ ‚áê get ‚®æ/ put-get s‚ÇÅ _ ‚ü©

  (do s ‚Üê get
      put s
      k s s)            ‚â°‚ü® get-put-get _ ‚ü©

  (do s ‚Üê get
      k s s) ‚àé

get-nop : (k : State A) ‚Üí (get >> k) ‚â° k
get-nop k =

  (do get
      k)                  ‚â°Àò‚ü® get-put-get (Œª _ ‚Üí k) ‚ü©

  (do s ‚Üê get
      put s
      k)                  ‚â°‚ü® get-put k ‚ü©

  k ‚àé

liftT : ‚Ñ±.Term A ‚Üí State A
liftT = lift‚ÇÅ

liftT-lemma : (xs : Syntax ùîΩ A) ‚Üí [ inj‚ÇÅ xs ] ‚â° liftT [ xs ]
liftT-lemma = elim-s _ _ Œª { (var x) ‚Üí refl ; (op (O , xs) P‚ü®xs‚ü©) ‚Üí sym (op‚Çú-com-[] _) ‚®æ cong (op‚Çú ‚àò _,_ (inl O)) (funExt P‚ü®xs‚ü©) }

state-commutes : ‚àÄ S‚Çí O ‚Üí (k : Signature.Arity ùïä S‚Çí ‚Üí Signature.Arity ùîΩ O ‚Üí State A) ‚Üí op‚Çú (inr S‚Çí , Œª s ‚Üí op‚Çú (inl O , k s)) ‚â° op‚Çú (inl O , Œª i ‚Üí op‚Çú (inr S‚Çí , flip k i))
state-commutes S‚Çí o k = sym (commutes o S‚Çí (flip k))

state-commutes-mult : (xs : ùíÆt.Term A) (ys : ‚Ñ±.Term B) (k : A ‚Üí B ‚Üí State C)
                    ‚Üí (do x ‚Üê lift‚ÇÇ xs ; y ‚Üê lift‚ÇÅ ys ; k x y) ‚â° (do y ‚Üê lift‚ÇÅ ys ; x ‚Üê lift‚ÇÇ xs ; k x y)
state-commutes-mult xs ys k = sym (commutes-mult ys xs (flip k))

pattern `put s = inr (ùíÆ.`put s)
pattern `get   = inr  ùíÆ.`get

module _ {A : Type a} where
  toStateT : State-Term A ‚Üí State A
  toStateT f =
    do s ‚Üê get
       y , s‚Ä≤ ‚Üê liftT (f s)
       put s‚Ä≤
       return y

  runStateT : State A ‚Üí State-Term A
  runStateT = interp‚Çú runStateT-alg runStateT-ret runStateT-resp (isSetŒ† Œª _ ‚Üí  squash/)

  stateT-iso : State A ‚áî State-Term A
  stateT-iso .fun = runStateT
  stateT-iso .inv = toStateT

  stateT-iso .rightInv =
    SplitQuotientedChoiceAt.elim~canonical
      choiceState _ (Œª _ ‚Üí isSetŒ† (Œª _ ‚Üí squash/) _ _)
      Œª k ‚Üí funExt Œª s‚ÇÅ ‚Üí

      runStateT (do s‚ÇÇ ‚Üê get
                    y , s‚ÇÉ ‚Üê liftT [ k s‚ÇÇ ]
                    put s‚ÇÉ
                    return y) s‚ÇÅ                                                ‚â°Àò‚ü® cong (flip runStateT s‚ÇÅ) (s‚ÇÇ ‚áê get ‚®æ/ cong (_>>= _) (liftT-lemma (k s‚ÇÇ))) ‚ü©

      runStateT (do s‚ÇÇ ‚Üê get
                    y , s‚ÇÉ ‚Üê [ inj‚ÇÅ (k s‚ÇÇ) ]
                    put s‚ÇÉ
                    return y) s‚ÇÅ                                                ‚â°Àò‚ü® cong (flip runStateT s‚ÇÅ) (syntactic-bind _ Synt.get ‚®æ s‚ÇÇ ‚áê get ‚®æ/ syntactic-bind _ (inj‚ÇÅ (k s‚ÇÇ)) ) ‚ü©


      runStateT [ Synt.get Synt.>>= (Œª s‚ÇÇ ‚Üí
                  inj‚ÇÅ (k s‚ÇÇ) Synt.>>= Œª { (y , s‚ÇÉ) ‚Üí
                  Synt.put s‚ÇÉ Synt.>>
                  Synt.return y
                }) ] s‚ÇÅ                                                         ‚â°‚ü®‚ü©

      Synt.runStateT (inj‚ÇÅ (k s‚ÇÅ) Synt.>>= (Œª { (y , s‚ÇÉ) ‚Üí
                      Synt.put s‚ÇÉ Synt.>>
                      Synt.return y })) s‚ÇÅ                                      ‚â°‚ü®‚ü©

      Synt.runStateT
        (interp _ op (Œª { (y , s‚ÇÉ) ‚Üí Synt.put s‚ÇÉ Synt.>> Synt.return y })
          (inj‚ÇÅ (k s‚ÇÅ))) s‚ÇÅ                                                     ‚â°‚ü® cong (_$ s‚ÇÅ) (interp-comp _ runStateT-alg runStateT-ret _ (inj‚ÇÅ (k s‚ÇÅ))) ‚ü©

      interp _ runStateT-alg
        (Synt.runStateT ‚àò (Œª { (y , s‚ÇÉ) ‚Üí Synt.put s‚ÇÉ Synt.>> Synt.return y }))
        (inj‚ÇÅ (k s‚ÇÅ)) s‚ÇÅ                                                        ‚â°‚ü®‚ü©

      interp _ runStateT-alg (const ‚àò ‚Ñ±.return) (inj‚ÇÅ (k s‚ÇÅ)) s‚ÇÅ                ‚â°‚ü® cong (_$ s‚ÇÅ) (interp‚ÇÅ inj-alg runState-alg _ (k s‚ÇÅ)) ‚ü©

      interp _ inj-alg (const ‚àò ‚Ñ±.return) (k s‚ÇÅ) s‚ÇÅ                             ‚â°Àò‚ü® cong (_$ s‚ÇÅ) (interp-fusion _ (const ‚àò [_]) Syntax.var (Œª xs ‚Üí funExt Œª s ‚Üí sym (‚Ñ±.op‚Çú-com-[] _)) (k s‚ÇÅ)) ‚ü©

      [ interp _ op Syntax.var (k s‚ÇÅ) ]                                         ‚â°‚ü® cong [_] (interp-id _ (k s‚ÇÅ)) ‚ü©

      [ k s‚ÇÅ ] ‚àé

  stateT-iso .leftInv = elimProp/ (Œª _ ‚Üí squash/ _ _) (elim-s _ _ leftInv-alg)
    where
    leftInv-alg : DepAlg (ùîΩ ‚äû ùïä) A Œª xs ‚Üí toStateT (runStateT [ xs ]) ‚â° [ xs ]

    leftInv-alg (var x) =

      toStateT (runStateT (return x))              ‚â°‚ü®‚ü©

      toStateT (Œª s ‚Üí [ Syntax.var (x , s) ])      ‚â°‚ü®‚ü©

      (do s ‚Üê get
          y , s‚Ä≤ ‚Üê liftT [ Syntax.var (x , s) ]
          put s‚Ä≤
          return y)                                ‚â°‚ü®‚ü©

      (do s ‚Üê get
          put s
          return x)                                ‚â°‚ü® get-put _ ‚ü©

      return x ‚àé

    leftInv-alg (op (`get , k) P‚ü®xs‚ü©) =

      toStateT (runStateT [ Syntax.op (`get , k) ])                   ‚â°‚ü®‚ü©

      (do s ‚Üê get
          y , s‚Ä≤ ‚Üê liftT (runStateT [ Syntax.op (`get , k) ] s)
          put s‚Ä≤
          return y)                                                   ‚â°‚ü®‚ü©

      (do s ‚Üê get
          y , s‚Ä≤ ‚Üê liftT (runStateT [ k s ] s)
          put s‚Ä≤
          return y)                                                   ‚â°Àò‚ü® get-get _ ‚ü©

      (do s‚ÇÅ ‚Üê get
          s‚ÇÇ ‚Üê get
          y , s‚Ä≤ ‚Üê liftT (runStateT [ k s‚ÇÅ ] s‚ÇÇ)
          put s‚Ä≤
          return y)                                                   ‚â°‚ü® s‚ÇÅ ‚áê get ‚®æ/ P‚ü®xs‚ü© s‚ÇÅ ‚ü©

      (do s‚ÇÅ ‚Üê get
          [ k s‚ÇÅ ])                                                   ‚â°Àò‚ü® syntactic-bind k Synt.get ‚ü©

      [ Syntax.op (`get , k) ] ‚àé


    leftInv-alg (op (`put x , k) P‚ü®xs‚ü©) =

      toStateT (runStateT [ op (`put x , k) ])                        ‚â°‚ü®‚ü©

      (do s‚ÇÅ ‚Üê get
          y , s‚ÇÇ ‚Üê liftT (runStateT [ op (`put x , k) ] s‚ÇÅ)
          put s‚ÇÇ
          return y)                                                   ‚â°‚ü®‚ü©

      (do s‚ÇÅ ‚Üê get
          y , s‚ÇÇ ‚Üê liftT (runStateT [ k tt ] x)
          put s‚ÇÇ
          return y)                                                   ‚â°‚ü® get-nop _ ‚ü©

      (do y , s‚ÇÇ ‚Üê liftT (runStateT [ k tt ] x)
          put s‚ÇÇ
          return y)                                                   ‚â°Àò‚ü® (y , s‚ÇÇ) ‚áê liftT (runStateT [ k tt ] x) ‚®æ/ put-put _ _ (return y) ‚ü©

      (do y , s‚ÇÇ ‚Üê liftT (runStateT [ k tt ] x)
          put x
          put s‚ÇÇ
          return y)                                                   ‚â°Àò‚ü® state-commutes-mult [ ùíÆ.Synt.put x ] (runStateT [ k tt ] x) _ ‚ü©

      (do put x
          y , s‚ÇÇ ‚Üê liftT (runStateT [ k tt ] x)
          put s‚ÇÇ
          return y)                                                   ‚â°Àò‚ü® put-get _ _ ‚ü©

      (do put x
          s‚ÇÅ ‚Üê get
          y , s‚ÇÇ ‚Üê liftT (runStateT [ k tt ] s‚ÇÅ)
          put s‚ÇÇ
          return y)                                                   ‚â°‚ü® cong (put x >>_) (P‚ü®xs‚ü© tt) ‚ü©

      (do put x
          [ k tt ])                                                   ‚â°‚ü®‚ü©

      [ op (`put x , k) ] ‚àé

    leftInv-alg (op (inl O , k) P‚ü®xs‚ü©) =

      toStateT (runStateT [ Syntax.op (inl O , k) ])                     ‚â°‚ü®‚ü©

      (do s ‚Üê get
          y , s‚Ä≤ ‚Üê liftT (‚Ñ±.op‚Çú (O , Œª i ‚Üí runStateT [ k i ] s))
          put s‚Ä≤
          return y)                                                      ‚â°‚ü® s ‚áê get ‚®æ/ cong (_>>= Œª { (y , s‚Ä≤) ‚Üí put s‚Ä≤ >> return y }) ((lift‚ÇÅ-com O (flip runStateT s ‚àò [_] ‚àò k))) ‚ü©

      (do s ‚Üê get
          y , s‚Ä≤ ‚Üê op‚Çú (inl O , Œª i ‚Üí liftT (runStateT [ k i ] s))
          put s‚Ä≤
          return y)                                                      ‚â°‚ü® s ‚áê get ‚®æ/ algebraic (inl O) (Œª { (y , s‚Ä≤) ‚Üí put s‚Ä≤ >> return y }) (liftT ‚àò flip runStateT s ‚àò [_] ‚àò k) ‚ü©

      (do s ‚Üê get
          op‚Çú (inl O , Œª i ‚Üí do y , s‚Ä≤ ‚Üê liftT (runStateT [ k i ] s)
                                put s‚Ä≤
                                return y))                               ‚â°‚ü® state-commutes ùíÆ.`get O (Œª s i ‚Üí liftT (runStateT [ k i ] s) >>= Œª ys‚Ä≤ ‚Üí  put (snd ys‚Ä≤) >> return (fst ys‚Ä≤)) ‚ü©

      op‚Çú (inl O , Œª i ‚Üí do s ‚Üê get
                            y , s‚Ä≤ ‚Üê liftT (runStateT [ k i ] s)
                            put s‚Ä≤
                            return y)                                    ‚â°‚ü® cong (op‚Çú ‚àò _,_ (inl O)) (funExt P‚ü®xs‚ü©) ‚ü©

      op‚Çú (inl O , Œª i ‚Üí [ k i ])                                        ‚â°‚ü® op‚Çú-com-[] k ‚ü©

      [ Syntax.op (inl O , k) ] ‚àé

