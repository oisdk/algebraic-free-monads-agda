{-# OPTIONS --safe #-}

open import Prelude as P hiding ([_])
open import Data.Vec
open import Signatures
open import Cubical.Relation.Binary
open import FinitenessConditions
open import FreeMonad.PackagedTheory

--------------------------------------------------------------------------------
-- A Free monad, which is the syntax type quotiented by a theory
--------------------------------------------------------------------------------

module FreeMonad.Quotiented {‚Ñì} (theory : FullTheory ‚Ñì) where

open FullTheory theory
open Signature ùîΩ

private module Op-Display where
  open import FreeMonad.Syntax ùîΩ renaming (op to op‚Ä≤)

  op : ‚àÉ o √ó (Arity o ‚Üí Syntax A) ‚Üí Syntax A
  op = op‚Ä≤

  open import FreeMonad.Relation ùîΩ ùíØ

  [_] : Syntax A ‚Üí Syntax A / _~‚Çú_
  [_] = P.[_]

open P using ([_])

open import FreeMonad.Syntax ùîΩ
open import FreeMonad.Theory ‚Ñì ùîΩ
open import FreeMonad.Relation ùîΩ ùíØ public

private variable xs ys zs : Syntax A
--------------------------------------------------------------------------------
-- The free monad is constructed by taking the quotient of the syntax over the
-- equivalence relation above.
--
-- Notice that the level is one higher than ‚Ñì: this is the level of the context
-- variable. Because it's existentially quantified we need to go one level up.
-- 
-- However, we don't have any of the normal level issues that you might expect,
-- because we *don't* need to incrememnt the level of the paramater of the
-- computation. In other words, if ‚Ñì = 0, then Term could have kind
-- Type‚ÇÅ ‚Üí Type‚ÇÅ. i.e. it is still an endofunctor, it can have values like
-- (Term (Term A)).
--
-- In fact, we could just have the context type be Fins or something.
-- Technically that wouldn't lose any expressive power (I think), but it would
-- be really annoying to work with.
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- A pointwise relation on a vector can be extended to the ~‚Çú relation
--------------------------------------------------------------------------------

module _ {o : Op} {B : Type b} where
  open SplitQuotientedChoiceAt {A = Arity o} {B = Syntax B} {_~_ = _~‚Çú_} (finiteArity o) public

private variable o : Op

pointwise‚Çú : {xs ys : Arity o ‚Üí Syntax A}
           ‚Üí xs ‚ü® Pointwise _~‚Çú_ ‚ü© ys
           ‚Üí op (o , xs) ~‚Çú op (o , ys)
pointwise‚Çú p = cong‚Çú _ _ _ Œª i ‚Üí ~‚Çú-effective _ _ (p i)

pointwise‚â° : (xs ys : Arity o ‚Üí Syntax A)
           ‚Üí Pointwise _~‚Çú_ xs ys ‚Üí
           [ op (o , xs) ]‚Çú ‚â° [ op (o , ys) ]‚Çú
pointwise‚â° xs ys p = eq/ _ _ (pointwise‚Çú p)

Op‚Çú‚ü¶_‚üß : ‚àÄ o ‚Üí Term (Arity o)
Op‚Çú‚ü¶ o ‚üß = [ Op‚ü¶ o ‚üß ]

--------------------------------------------------------------------------------
-- We can implement the op operator on the quotiented free type
--------------------------------------------------------------------------------

private module Op‚Çú-Display {A : Type a} where

  module _ {o : Op} where
    cong-point :  (k‚Çó k·µ£ : Arity o ‚Üí Syntax A) ‚Üí
                  (l~r : Pointwise _~‚Çú_ k‚Çó k·µ£) ‚Üí
                  [ op (o , k‚Çó) ]‚Çú ‚â° [ op (o , k·µ£) ]‚Çú
    cong-point k‚Çó k·µ£ l~r =
      eq/ (op (o , k‚Çó)) (op (o , k·µ£)) (cong‚Çú o k‚Çó k·µ£ Œª i ‚Üí ~‚Çú-effective (k‚Çó i) (k·µ£ i) (l~r i))
  op‚Çú : ùîΩ -Alg[ Term A ]
  op‚Çú (o , k~) = rec/ squash/ (Œª k ‚Üí [ op (o , k) ]) cong-point (trav k~)
  _ =
    op‚Çú ‚¶Ç (‚àÉ o √ó (Arity o ‚Üí Syntax A / _~‚Çú_) ‚Üí Syntax A / _~‚Çú_)
op‚Çú‚Ä≤ : (Arity o ‚Üí Syntax A) ‚Üí Term A
op‚Çú‚Ä≤ = [_] ‚àò op ‚àò _,_ _

op‚Çú : ùîΩ -Alg[ Term A ]
op‚Çú (Op , p) = rec/ squash/ op‚Çú‚Ä≤ pointwise‚â° (trav p)

--------------------------------------------------------------------------------
-- Properties of op‚Çú
--------------------------------------------------------------------------------

op‚Çú-com-[] : (xs : Arity o ‚Üí Syntax A) ‚Üí op‚Çú (o , [_] ‚àò xs) ‚â° [ op (o , xs) ]
op‚Çú-com-[] xs = cong (rec/ squash/ op‚Çú‚Ä≤ pointwise‚â°) (un-trav xs)

interp-op‚Çú-com-[]  :  (k : A ‚Üí Syntax B) (xs : Syntax A)
                   ‚Üí  [ interp op k xs ] ‚â° interp op‚Çú ([_] ‚àò k) xs
interp-op‚Çú-com-[] k = interp-fusion [_]‚Çú k (Œª { (o , xs) ‚Üí sym (op‚Çú-com-[] xs) })

--------------------------------------------------------------------------------
-- op‚Çú respects the theory: this means it can be used in interp, to implement
-- bind.
--------------------------------------------------------------------------------

op‚Çú-resp : (op‚Çú ‚¶Ç ùîΩ -Alg[ Term A ]) Models ùíØ
op‚Çú-resp i t =
  let lhs ‚âê rhs = ùíØ .Theory.Eqns i .eqn t in 
  SplitQuotientedChoiceAt.elim~canonical (finiteVars _ _) _ (Œª _ ‚Üí squash/ _ _)
    Œª k ‚Üí
        interp op‚Çú ([_] ‚àò k) lhs  ‚â°Àò‚ü® interp-op‚Çú-com-[] k lhs ‚ü©
        [ interp op k lhs ]       ‚â°‚ü® eq/ _ _ (eq‚Çú i t k) ‚ü©
        [ interp op k rhs ]       ‚â°‚ü® interp-op‚Çú-com-[] k rhs ‚ü©
        interp op‚Çú ([_] ‚àò k) rhs ‚àé

infixl 4.5 _=<<_
infixr 4.5 _>>=_ _>>_

--------------------------------------------------------------------------------
-- Bind
--------------------------------------------------------------------------------

Op[_] : ‚àÄ o ‚Üí Term (Arity o)
Op[ o ] = [ op (o , var) ]

return : A ‚Üí Term A
return x = [ var x ]

_=<<_ : (A ‚Üí Term B) ‚Üí Term A ‚Üí Term B
_=<<_ k = interp‚Çú op‚Çú k op‚Çú-resp squash/

_>>=_ : Term A ‚Üí (A ‚Üí Term B) ‚Üí Term B
xs >>= k = interp‚Çú op‚Çú k op‚Çú-resp squash/ xs

_>>_ : Term A ‚Üí Term B ‚Üí Term B
xs >> ys = xs >>= const ys

infixr 9 _<=<_
_<=<_ : (B ‚Üí Term C) ‚Üí (A ‚Üí Term B) ‚Üí A ‚Üí Term C
(f <=< g) x = f =<< g x

infixl 9 _>=>_
_>=>_ :  (A ‚Üí Term B) ‚Üí (B ‚Üí Term C) ‚Üí A ‚Üí Term C
_>=>_ = flip _<=<_

infixl 4.5 _<$>_
_<$>_ : (A ‚Üí B) ‚Üí Term A ‚Üí Term B
f <$> xs = xs >>= return ‚àò f

--------------------------------------------------------------------------------
-- Properties of bind
--------------------------------------------------------------------------------

module S = SyntaxBind

[‚ü™_‚ü´] : ùîñùî∂ùî´ùî±ùîûùîµ A (Term A) P ‚Üí Term A
[‚ü™ ùîñùî∂ùî´ùî±ùîûùîµ.var x ‚ü´] = return x
[‚ü™ ùîñùî∂ùî´ùî±ùîûùîµ.op xs  _ ‚ü´] = op‚Çú xs

elim‚Çú-prop :  (P : Term A ‚Üí Type p)  ‚Üí
              (‚àÄ x ‚Üí isProp (P x)) ‚Üí
              (œï : (xs : ùîñùî∂ùî´ùî±ùîûùîµ A (Term A) P) ‚Üí P [‚ü™ xs ‚ü´]) ‚Üí
              (xs : Term A) ‚Üí P xs
elim‚Çú-prop {A = A} P prop œï = elimProp/ prop (elim-s (Œª x ‚Üí P [ x ]) Œ®)
  where
  Œ® : DepAlg A (Œª x ‚Üí P [ x ])
  Œ® (ùîñùî∂ùî´ùî±ùîûùîµ.var x) = œï (ùîñùî∂ùî´ùî±ùîûùîµ.var x)
  Œ® (ùîñùî∂ùî´ùî±ùîûùîµ.op (o , xs) P‚ü®xs‚ü©) = subst P (op‚Çú-com-[] xs) (œï (ùîñùî∂ùî´ùî±ùîûùîµ.op (o , Œª i ‚Üí [ xs i ]) P‚ü®xs‚ü©))

interp‚Çú-op‚Çú : {A B : Type ‚Ñì}
  (œï : ùîΩ -Alg[ A ])
  (k : B ‚Üí A)
  (resp : œï Models ùíØ)
  (set : isSet A)
  (o : Op)
  (xs : Arity o ‚Üí Term B) ‚Üí
  interp‚Çú œï k resp set (op‚Çú (o , xs)) ‚â° œï (o , interp‚Çú œï k resp set ‚àò xs)
interp‚Çú-op‚Çú œï k resp set o = elim~canonical _ (Œª _ ‚Üí set _ _) Œª k‚Ä≤ ‚Üí cong (interp‚Çú œï k resp set) (op‚Çú-com-[] k‚Ä≤)

syntactic-bind : (k : A ‚Üí Syntax B) (xs : Syntax A)
            ‚Üí [ xs S.>>= k ] ‚â° [ xs ] >>= ([_] ‚àò k)
syntactic-bind k = elim-s (Œª xs ‚Üí [ xs S.>>= k ] ‚â° [ xs ] >>= [_] ‚àò k) (alg k)
  where
  alg : (k : A ‚Üí Syntax B) ‚Üí Œ®[ xs ‚¶Ç Syntax A ] ([ xs S.>>= k ] ‚â° [ xs ] >>= [_] ‚àò k)
  alg k (var x)       = refl
  alg k (op (o , xs) r) =
    [ op (o , xs) S.>>= k ]           ‚â°‚ü®‚ü©
    [ op (o , k S.<=< xs) ]           ‚â°Àò‚ü® op‚Çú-com-[] (k S.<=< xs) ‚ü©
    op‚Çú (o , [_] ‚àò k S.<=< xs)        ‚â°‚ü® cong (Œª e ‚Üí op‚Çú (o , e)) (funExt r) ‚ü©
    op‚Çú (o , interp op‚Çú ([_] ‚àò k) ‚àò xs) ‚â°‚ü®‚ü©
    interp op‚Çú ([_] ‚àò k) (op (o , xs))  ‚â°‚ü®‚ü©
    [ op (o , xs) ] >>= [_] ‚àò k ‚àé

algebraic : ‚àÄ o (f : A ‚Üí Term B) (xs : Arity o ‚Üí Term A) ‚Üí
               f =<< op‚Çú (o , xs) ‚â° op‚Çú (o , f <=< xs)
algebraic o f xs =
  elimProp/
    {P = Œª xs‚Ä≤ ‚Üí xs‚Ä≤ ‚â° trav xs
               ‚Üí rec/ squash/ op‚Çú‚Ä≤ pointwise‚â° xs‚Ä≤ >>= f ‚â° op‚Çú (o , f <=< xs)}
    (Œª _ ‚Üí isProp‚Üí (squash/ _ _)) lemma (trav xs) refl
  where
  lemma : ‚àÄ xs‚Ä≤ ‚Üí [ xs‚Ä≤ ] ‚â° trav xs ‚Üí f =<< op‚Çú‚Ä≤ xs‚Ä≤ ‚â° op‚Çú (o , f <=< xs)
  lemma xs‚Ä≤ xp =
    op‚Çú‚Ä≤ xs‚Ä≤ >>= f                               ‚â°‚ü®‚ü©
    op‚Çú (o , f <=< dist [ xs‚Ä≤ ])         ‚â°‚ü® cong (Œª e ‚Üí op‚Çú (o , f <=< dist e)) xp ‚ü©
    op‚Çú (o , f <=< dist (trav xs))  ‚â°‚ü® cong (Œª e ‚Üí op‚Çú (o , f <=< e)) (funExt (dist‚àòtrav xs)) ‚ü©
    op‚Çú (o , f <=< xs) ‚àé

assoc : (xs : Term C) (f : C ‚Üí Term B) (g : B ‚Üí Term A) ‚Üí
              ((xs >>= f) >>= g) ‚â° (xs >>= (f >=> g))
assoc xs f g =
  elimProp/
    {P = Œª xs ‚Üí ((xs >>= f) >>= g) ‚â° (xs >>= (f >=> g))} 
    (Œª _ ‚Üí squash/ _ _)
    (elim-s (Œª xs ‚Üí interp op‚Çú f xs >>= g ‚â° interp op‚Çú (f >=> g) xs) (alg f g))
    xs
  where
  alg : (f : C ‚Üí Term B) (g : B ‚Üí Term A)
      ‚Üí Œ®[ xs ‚¶Ç Syntax C ] (interp op‚Çú f xs >>= g ‚â° interp op‚Çú (f >=> g) xs)
  alg f g (var x) = refl
  alg f g (op (o , xs) r) =
    interp op‚Çú f (op (o , xs)) >>= g    ‚â°‚ü®‚ü©
    op‚Çú (o , interp op‚Çú f ‚àò xs) >>= g   ‚â°‚ü® algebraic _ g _ ‚ü©
    op‚Çú (o , g <=< interp op‚Çú f ‚àò xs)   ‚â°‚ü®‚ü©
    op‚Çú (o , g <=< interp op‚Çú f ‚àò xs)   ‚â°‚ü® cong (op‚Çú ‚àò _,_ o) (funExt Œª s ‚Üí r s) ‚ü©
    op‚Çú (o , interp op‚Çú (f >=> g) ‚àò xs) ‚â°‚ü®‚ü©
    interp op‚Çú (f >=> g) (op (o , xs)) ‚àé

>>=-id ≥ : (xs : Term A) ‚Üí xs >>= ([_] ‚àò var) ‚â° xs
>>=-id ≥ =
  elimProp/
    (Œª _ ‚Üí squash/ _ _)
    (Œª xs ‚Üí sym (syntactic-bind var xs) ‚®æ cong [_] (interp-id xs))

>>=-idÀ° : (x : A) (k : A ‚Üí Term B)  ‚Üí [ var x ] >>= k ‚â° k x
>>=-idÀ° _ _ = refl

<$>-id : (xs : Term A) ‚Üí id <$> xs ‚â° xs
<$>-id = >>=-id ≥

<$>-comp : (f : B ‚Üí C) (g : A ‚Üí B) (xs : Term A) ‚Üí f <$> (g <$> xs) ‚â° (f ‚àò g) <$> xs
<$>-comp f g xs = assoc xs _ _

infixr 2 following
following : (v : Term A) {k‚ÇÅ k‚ÇÇ : A ‚Üí Term B} (pr : (x : A) ‚Üí k‚ÇÅ x ‚â° k‚ÇÇ x) ‚Üí v >>= k‚ÇÅ ‚â° v >>= k‚ÇÇ
following v pr = cong (v >>=_) (funExt pr)

syntax following v (Œª x ‚Üí e) = x ‚áê v ‚®æ/ e

join : Term (Term A) ‚Üí Term A
join t = t >>= (Œª x ‚Üí x)

-- Somehow the following function is very slow to type check, so we make it abstract.
abstract
  >>=-join-eq : (s : Term A) (f : A ‚Üí Term B) ‚Üí (s >>= f) ‚â° join (f <$> s)
  >>=-join-eq s f
    = (s >>= f)                           ‚â°‚ü®‚ü©
      (s >>= ((return ‚àò f) >=> (Œª x ‚Üí x)))   ‚â°Àò‚ü® assoc s _ _ ‚ü©
      (s >>= (return ‚àò f)) >>= (Œª x ‚Üí x)     ‚â°‚ü®‚ü©
      (f <$> s) >>= (Œª x ‚Üí x)             ‚â°‚ü®‚ü©
      join (f <$> s)                      ‚àé

<$>-comm : (s : Syntax A) (f : A ‚Üí B) ‚Üí f <$> [ s ] ‚â° [ f S.<$> s ]
<$>-comm s f = sym (syntactic-bind (var ‚àò f) s)

>>=-join-comm : (s : Syntax A) (f : A ‚Üí Term B) ‚Üí [ s ] >>= f ‚â° join [ f S.<$> s ]
>>=-join-comm s f = >>=-join-eq [ s ] f ‚®æ (Œª i ‚Üí join (<$>-comm s f i))
